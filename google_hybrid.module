<?php
/**
 * @file
 * Hybrid Authentication (OpenId + OAuth) for Google Data API
 * 
 * References:
 * http://code.google.com/apis/accounts/docs/OpenID.html
 * http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html
 */

/**
 * Implementation of hook_menu.
 */
function google_hybrid_menu() {
  $items['openid/google/start'] = array(
    'title' => 'Google Authentication',
    'description' => 'OpenID login with Google Hybrid authentication',
    'page callback' => 'google_hybrid_start_page',
    'access callback' => 'user_is_anonymous',
    //'type' => MENU_CALLBACK,
  );
  $items['openid/google/authenticate'] = array(
    'title' => 'Google Authentication',
    'description' => 'OpenID login with Google Hybrid authentication',
    'page callback' => 'google_hybrid_authentication_page',
    'access callback' => TRUE, //'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Start Google authentication
 * 
 * Note: If you've been using both OpenID and OAuth separately, you may be able to use the same domain
 *  registration as long as the OpenID realm parameter value matches the OAuth consumer  parameter value. 
 *  If the values don't match, either re-register a domain consistent with the OpenID realm value, 
 *  or change the value of realm. However, changing the realm may not be a viable option if you have 
 *  existing users with OpenID.
 *  From http://code.google.com/apis/accounts/docs/OpenID.html
 */
function google_hybrid_start_page() {
  $request = array(
    'openid_identifier' => 'https://www.google.com/accounts/o8/id',
    //'openid.return_to' => url("http://reyero.net/googleoauth"),
    'openid.return_to' => url('openid/google/authenticate', array('absolute' => TRUE, 'query' => 'destination=')),
  );
  $request['openid.ns'] = 'http://specs.openid.net/auth/2.0';
  // Only if we have a consumer set up we go for the whole Hybrid thing
  /*
  if ($consumer = oauth_google_get_consumer()) {
    $request['openid.realm'] = $consumer->key;
    //$request['openid.ns.oauth'] = "http://specs.openid.net/extensions/oauth/1.0";
    $request['openid.ns.oauth'] = "http://specs.openid.net/extensions/oauth/1.0";
    $request['openid.oauth.consumer'] = $consumer->key;
    $request['openid.oauth.scope'] = oauth_google_get_scope();
  }
  */
  openid_begin($request['openid_identifier'], $request['openid.return_to'], $request); 
}

/**
 * Authentication callback. Parse OpenID + OAuth parameters
 * 
 * Remae of openid_authentication_page()
 */
function google_hybrid_authentication_page() {
  $result = openid_complete();
  switch ($result['status']) {
    case 'success':
      // This will store the OAuth parameters in session
      google_hybrid_store_params($result);
      return openid_authentication($result);
    case 'failed':
      drupal_set_message(t('OpenID login failed.'), 'error');
      break;
    case 'cancel':
      drupal_set_message(t('OpenID login cancelled.'));
      break;
  }
  drupal_goto();
}

/**
 * Implementation of hook_user()
 * 
 * If the user is being created or after successful login, get the access token
 */
function google_hybrid_user($op, &$edit, &$account, $category = NULL) {
  if (($op == 'insert' || $op == 'login') && ($params = google_hybrid_store_params())) {
    google_hybrid_create_token($account, $params);
  }
}

/**
 * Get access token
 */
function google_hybrid_create_token($account, $params) {
  $consumer = GoogleOAuthConsumer::load($params['consumer']);
  // Request token with empty secret, http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html
  $request_token = new GoogleOAuthToken($params['request_token'], '', array('type' => 'request', 'uid' => $account->uid, 'consumer_key' => $consumer->key, 'authorized' => 1));
  // Do we need to save the request token?
  $request_token->write();
  $client = new GoogleOAuthClient($consumer);
  $client->setRequestToken($request_token);
  $access_token = $client->getAccessToken();
  $access_token->uid = $account->uid;
  $access_token->write();
  drupal_set_message(t('The application has been authorized and you have got an access token.'));
}

/**
 * Parse OpenID response and store parameters in session
 * 
 * @todo Find the right parameters by matching 
 *   $result['openid.ns.xxx'] == "http://specs.openid.net/extensions/oauth/1.0"
 */
function google_hybrid_store_params($result = NULL) {
  $params = array();
  if ($result) {
    $ns = 'ext2'; // Default for google
    $consumer = google_hybrid_oauth_consumer();
    $params = array(
      'request_token' => $result["openid.$ns.request_token"],
      'scope' => $result["openid.$ns.scope"],
      'consumer' => $consumer->key,
    );
    $_SESSION['google_hybrid'] = $params;
  }
  elseif (isset($_SESSION['google_hybrid'])) {
    $params = $_SESSION['google_hybrid'];
    unset($_SESSION['google_hybrid']);
  }
  return $params;
}

/**
* Implementation of hook_openid().
*
* Request OAuth token.
*/
function google_hybrid_openid($op, $request) {
  $values = array();
  if ($op == 'request') {
    //dsm($request);
    if ($consumer = google_hybrid_oauth_consumer()) {
      //$values['openid.realm'] = 'http://' . $consumer->key;
      $values['openid.realm'] = 'http://local.reyero.net';
      // Required for hybrid auth
      $values['openid.ns.ui'] = "http://specs.openid.net/extensions/ui/1.0";
      $values['openid.ns.pape'] = "http://specs.openid.net/extensions/pape/1.0";
      // AX
      $values['openid.ns.ax'] = "http://openid.net/srv/ax/1.0";
      $values['openid.ax.mode'] = 'fetch_request';
      $values['openid.ax.required'] ="email,first,last,country";
      $values['openid.ax.type.country'] = "http://axschema.org/contact/country/home";
      $values['openid.ax.type.first'] = "http://axschema.org/namePerson/first";
      $values['openid.ax.type.last'] = "http://axschema.org/namePerson/last";
      $values['openid.ax.type.email'] = "http://axschema.org/contact/email";
      // OAuth extension
      $values['openid.ns.oauth'] = "http://specs.openid.net/extensions/oauth/1.0";
      $values['openid.oauth.consumer'] = $consumer->key;
      $values['openid.oauth.scope'] = oauth_google_get_scope();
      // Hacking return_to
      //$values['openid.return_to'] = url("http://reyero.net/googleoauth");
    }
    //dsm($values);
  }
  return $values;
}

/**
 * Get consumer
 */
function google_hybrid_oauth_consumer() {
  // We try with this one for now
  return oauth_google_get_consumer();
}
