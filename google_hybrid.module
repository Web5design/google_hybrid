<?php
/**
 * @file
 * Hybrid Authentication (OpenId + OAuth) for Google Data API
 * 
 * References:
 * http://code.google.com/apis/accounts/docs/OpenID.html
 * http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html
 */

// Start path for Google authentication
define('GOOGLE_HYBRID_START_PATH', 'openid/google/start');
// OpenID identifier for google accounts 
define('GOOGLE_HYBRID_OPENID_IDENTIFIER', 'https://www.google.com/accounts/o8/id');
// OpenID OAuth namespace
define('GOOGLE_HYBRID_OPENID_OAUTH', 'http://specs.openid.net/extensions/oauth/1.0');
// OpenID AX namespace
define('GOOGLE_HYBRID_OPENID_AX', 'http://openid.net/srv/ax/1.0');

/**
 * Implementation of hook_menu.
 */
function google_hybrid_menu() {
  $items[GOOGLE_HYBRID_START_PATH] = array(
    'title' => 'Google Authentication',
    'description' => 'OpenID login with Google Hybrid authentication',
    'page callback' => 'google_hybrid_start_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  $items['openid/google/authenticate'] = array(
    'title' => 'Google Authentication',
    'description' => 'OpenID login with Google Hybrid authentication',
    'page callback' => 'google_hybrid_authentication_page',
    'access callback' => 'user_is_anonymous',
    'file' => 'google_hybrid.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter : adds OpenID login to the login forms.
 */
function google_hybrid_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block':
    case 'user_login';
      $items[] = l(t('Log in using your Google account'), GOOGLE_HYBRID_START_PATH);
      $form['google_hybrid'] = array(
        '#value' => theme('item_list', $items),
        '#weight' => 1,
      );
      break;
    case 'user_admin_settings':
      $form['hybrid'] = array(
        '#title' => t('Google Hybrid authentication'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#weight' => -1,
      );
      $form['hybrid']['google_hybrid_user_register'] = array(
        '#type' => 'radios', '#title' => t('Account registration'), 
        '#default_value' => variable_get('google_hybrid_user_register', 0), 
        '#options' => array(
            t('Use site default behavior for new user accounts. See the settings below.'), 
            t('Enable quick registration for authenticated users without administrator approval nor e-mail verification.'),
         ),
      );
      break;
  }
}

/**
 * Start Google authentication
 */
function google_hybrid_start_page() {
  // First of all, clean stored parameters if any
  google_hybrid_store_params();
  // Now build a Google OpenID request and go for it
  $request = array(
    'openid_identifier' => GOOGLE_HYBRID_OPENID_IDENTIFIER,
    //'openid.return_to' => url("http://reyero.net/googleoauth"),
    'openid.return_to' => url('openid/google/authenticate', array('absolute' => TRUE, 'query' => drupal_get_destination())),
  );
  $request['openid.ns'] = 'http://specs.openid.net/auth/2.0';
  // Oauth parameters will added later, on hook_openid
  openid_begin($request['openid_identifier'], $request['openid.return_to'], $request); 
}

/**
 * Implementation of hook_user()
 * 
 * If the user is being created or after successful login, get the access token
 */
function google_hybrid_user($op, &$edit, &$account, $category = NULL) {
  if (($op == 'insert' || $op == 'login') && ($params = google_hybrid_store_params())) {
    google_hybrid_create_token($account, $params);
  }
}

/**
 * Get access token
 */
function google_hybrid_create_token($account, $params) {
  $consumer = GoogleOAuthConsumer::load($params['consumer']);
  // Request token with empty secret, http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html
  $request_token = new GoogleOAuthToken($params['request_token'], '', array('type' => 'request', 'uid' => $account->uid, 'consumer_key' => $consumer->key, 'authorized' => 1));
  // Do we need to save the request token?
  $request_token->write();
  $client = new GoogleOAuthClient($consumer);
  $client->setRequestToken($request_token);
  // @todo Should we delete previous access tokens if existing?
  if ($access_token = $client->getAccessToken()) {
    $access_token->uid = $account->uid;
    $access_token->write();
    drupal_set_message(t('The application has been authorized and you have got an access token.'));
  }
  else {
    drupal_set_message(t('Error getting an access token.'), 'error');
  }
}

/**
 * Parse OpenID response and store parameters in session
 * 
 * @todo Find the right parameters by matching 
 *   $result['openid.ns.xxx'] == "http://specs.openid.net/extensions/oauth/1.0"
 */
function google_hybrid_store_params($params = NULL) {
  if ($params) {
    $_SESSION['google_hybrid'] = $params;
  }
  elseif (isset($_SESSION['google_hybrid'])) {
    $params = $_SESSION['google_hybrid'];
    unset($_SESSION['google_hybrid']);
  }
  return $params;
}

/**
* Implementation of hook_openid().
*
* Request OAuth token.
*/
function google_hybrid_openid($op, $request) {
  global $base_url;

  $values = array();
  // This will rewrite only OpenID Google requests
  if ($op == 'request' && strpos($_SESSION['openid']['claimed_id'], GOOGLE_HYBRID_OPENID_IDENTIFIER) === 0) {
    // For Google Hybrid to work, we need the site domain to match the consumer key
    // If the realm doesn't match the host, we'll get an error on Google page
    // If we have a different valid 'realm' we get OpenID but not OAuth    
    $url = parse_url($base_url);
    $consumer = google_hybrid_oauth_consumer();
    if ($consumer && $consumer->key == $url['host']) {
      $values['openid.realm'] =$url['scheme'] . '://' . $url['host'];
      // Required for hybrid auth ?
      $values['openid.ns.ui'] = "http://specs.openid.net/extensions/ui/1.0";
      $values['openid.ns.pape'] = "http://specs.openid.net/extensions/pape/1.0";
      // AX
      $values['openid.ns.ax'] = GOOGLE_HYBRID_OPENID_AX;
      $values['openid.ax.mode'] = 'fetch_request';
      $values['openid.ax.required'] ="email,first,last,country";
      $values['openid.ax.type.country'] = "http://axschema.org/contact/country/home";
      $values['openid.ax.type.first'] = "http://axschema.org/namePerson/first";
      $values['openid.ax.type.last'] = "http://axschema.org/namePerson/last";
      $values['openid.ax.type.email'] = "http://axschema.org/contact/email";
      // OAuth extension
      $values['openid.ns.oauth'] = GOOGLE_HYBRID_OPENID_OAUTH;
      $values['openid.oauth.consumer'] = $consumer->key;
      $values['openid.oauth.scope'] = oauth_google_get_scope();
      // Hacking return_to
      //$values['openid.return_to'] = url("http://reyero.net/googleoauth");
    }
  }
  return $values;
}

/**
 * Get consumer. We use default consumer from oauth_google module
 */
function google_hybrid_oauth_consumer() {
  static $consumer;
  if (!isset($consumer)) {
    $consumer = oauth_google_get_consumer();
  }
  return $consumer;
}
